LCDBoardController Specification
Written by Celarix on 2014-12-28

This software controls an LCD display board that presents itself as a COM device via a USB cable.
Theoretically, this software can be made to control a wide array of LCD boards, but, at the moment,
this software is designed to control a 16x2 character LCD display over USB. The board being used is
an Adafruit Standard HD44780 LCD 16x2 character display (http://www.adafruit.com/products/181). A
tutorial, including a command reference and driver downloads, can be found at 
https://learn.adafruit.com/usb-plus-serial-backpack/overview.

At the lowest level, the software communicates by sending bytes over the USB port. The LCD display board
will display most bytes sent to it as ASCII characters. The display board interprets sequences of bytes
beginning with 0xFE as a command character which can be used to change color, scroll settings, and other
settings of the board.

The board also has eight in-memory slots and four banks of eight slots for custom-defined characters.
Each character is defined as eight bytes - each of those 64 bits represents a single pixel in each 8x8
character.

The LCDBoard class represents the board in software. It has methods to write characters and strings to
the board. It also has methods for sending commands. This is the most direct way to write to the board
and it will follow the board's autoscrolling rules. Finally, there are methods to erase the last character,
line, and screen. The class will also have a private in-memory representation of the board's state and its
custom characters.

The Message class represents a text message that can be printed to a board through an LCDBoard instance.
A Message instance will accept any string and will perform pre-display processing before displaying the
message. First, any UTF-16 character higher than 0xFF will be replaced with 0x3F (ASCII ?). Next, any
custom character escape in the form of /c0 through /c7 will be replaced with 0x00 through 0x07 in the
processed string. Finally, the string will be made to 16 characters wide by either placing words too long
on the next line or by separating words with dashes, at the user's choice. Finally, the string can be displayed.
If the string is too long to be displayed in two rows, only the first two rows will initially be displayed.
Methods in the Message class can adjust this "cursor" and change what is displayed.